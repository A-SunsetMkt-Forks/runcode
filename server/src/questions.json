{
  "deepClone": {
    "answer": "export default function deepClone(obj, weakMap = new WeakMap()) {\n  const type = Object.prototype.toString.call(obj);\n  if (!(type === '[object Object]' || type === '[object Array]')) return obj;\n  const o = type === '[object Object]' ? {} : [];\n  if (weakMap.get(obj)) return o;\n  weakMap.set(obj, true);\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      o[key] = deepClone(obj[key], weakMap);\n    }\n  }\n  return o;\n}\n",
    "introduce": "## DeepClone\n\n实现对象深拷贝, 修改深拷贝对象不影响原对象\n\n用例 1:\n\n```js\nconst userList = { user: [{ name: 'xjq' }] };\nconst cloneUserList = deepClone(userList);\n\nconsole.log(cloneUserList); // { user: [{ name: 'xjq' }] }\ncloneUserList.user.push({ name: 'xjq1' });\nconsole.log(cloneUserList.user); // [{ name:'xjq' }]\n```\n\n用例 2:\n\n```js\n\nconst user = { name: 'xjq', height: 180 };\nconst cloneUser = deepClone(user);\n\nconsole.log(user); // { name: 'xjq', height: 180 }\n\ndelete cloneUser.height;\nconsole.log(cloneUser); // { name: 'xjq' }\nconsole.log(user; // { name: 'xjq', height: 180 }\n```\n",
    "desc": "实现对象深拷贝, 修改深拷贝对象不影响原对象",
    "index": "/**\n * 深拷贝\r\n *\r\n * @param {*} obj\r\n * @return {*}\r\n */\r\nexport default function deepClone(obj) {\r\n  return {};\r\n}\r\n",
    "test": "import assert from 'assert';\nimport _deepClone from './answer.mjs';\r\nimport deepClone from './index.mjs';\r\n\r\nconst cases = [\r\n  {\r\n    Input: [1, 2, { a: 1 }],\r\n    Expected: [1, 2, { a: 1 }],\r\n    Message: '两层对象',\r\n  },\r\n  {\r\n    Input: [{ f: 1 }],\r\n    Expected: [{ f: 1 }],\r\n    Message: '一层对象',\r\n  },\r\n  {\r\n    Input: { b: [{ c: 1, d: [{ d: 1, f: 2 }] }] },\r\n    Expected: { b: [{ c: 1, d: [{ d: 1, f: 2 }] }] },\r\n    Message: '两层对象, 修改返回值',\r\n  },\r\n];\r\n\r\n(function () {\r\n  for (let i = 0; i < cases.length; i++) {\r\n    const { Input, Expected, Message } = cases[i];\r\n    let output;\r\n    try {\r\n      output = deepClone(Input);\r\n      assert.deepEqual(output, Expected);\r\n    } catch (error) {\r\n      console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('Input:', JSON.stringify(Input));\r\n        console.log('Expected:', JSON.stringify(error.expected));\r\n        console.log('Received:', JSON.stringify(output));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    const originInput = _deepClone(Input);\r\n    try {\r\n      output['1'] = Math.random();\r\n      assert.deepEqual(Input, originInput);\r\n    } catch (error) {\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n        console.log(\r\n          'Mutate Output Expected Input: ',\r\n          JSON.stringify(originInput)\r\n        );\r\n        console.log('Input: ', JSON.stringify(Input));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    console.log('用例 ' + String(i + 1) + ': ' + Message + ' 通过');\r\n  }\r\n})();\r\n"
  },
  "unique": {
    "answer": "export default function unique(arr) {\n  return [...new Set(arr)];\r\n}\r\n",
    "introduce": "## Unique\n\n数组去重\n\n用例 1:\n\n```js\nconst arr = [1, 2, 3];\nconst uniqueArr = unique(arr1);\n\nconsole.log(uniqueArr); // [1, 2, 3]\n```\n\n用例 2:\n\n```js\nconst arr = [1, 2, 3, 3, 3];\nconst uniqueArr = unique(arr);\n\nconsole.log(uniqueArr); // [1, 2, 3]\n```\n",
    "desc": "数组去重",
    "index": "export default function unique(arr) {\n  return [];\r\n}\r\n",
    "test": "import assert from 'assert';\nimport unique from './index.mjs';\r\n\r\nconst cases = [\r\n  {\r\n    Input: [1, 2, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '无重复数字',\r\n  },\r\n  {\r\n    Input: [1, 2, 3, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '单个重复数字',\r\n  },\r\n  {\r\n    Input: [1, 1, 2, 2, 2, 3, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '多个重复数字',\r\n  },\r\n];\r\n\r\n(function () {\r\n  for (let i = 0; i < cases.length; i++) {\r\n    const { Input, Expected, Message } = cases[i];\r\n    let output;\r\n    try {\r\n      output = unique(Input);\r\n      assert.deepEqual(output, Expected);\r\n    } catch (error) {\r\n      console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('Input:', JSON.stringify(Input));\r\n        console.log('Expected:', JSON.stringify(error.expected));\r\n        console.log('Received:', JSON.stringify(output));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    console.log('用例 ' + String(i + 1) + ': ' + Message + ' 通过');\r\n  }\r\n})();\r\n"
  }
}
