{"deepClone":{"answer":"export default function deepClone(obj, weakMap = new WeakMap()) {\r\n  const type = Object.prototype.toString.call(obj);\r\n  if (!(type === '[object Object]' || type === '[object Array]')) return obj;\r\n  const o = type === '[object Object]' ? {} : [];\r\n  if (weakMap.get(obj)) return o;\r\n  weakMap.set(obj, true);\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      o[key] = deepClone(obj[key]);\r\n    }\r\n  }\r\n  return o;\r\n}\r\n","introduce":"## DeepClone\r\n\r\n实现对象深拷贝, 修改深拷贝对象不影响原对象\r\n\r\n用例 1:\r\n\r\n```js\r\nconst userList = { user: [{ name: 'xjq' }] };\r\nconst cloneUserList = deepClone(userList);\r\n\r\nconsole.log(cloneUserList); // { user: [{ name: 'xjq' }] }\r\ncloneUserList.user.push({ name: 'xjq1' });\r\nconsole.log(cloneUserList.user); // [{ name:'xjq' }]\r\n```\r\n\r\n用例 2:\r\n\r\n```js\r\n\r\nconst user = { name: 'xjq', height: 180 };\r\nconst cloneUser = deepClone(user);\r\n\r\nconsole.log(user); // { name: 'xjq', height: 180 }\r\n\r\ndelete cloneUser.height;\r\nconsole.log(cloneUser); // { name: 'xjq' }\r\nconsole.log(user; // { name: 'xjq', height: 180 }\r\n```\r\n","index":"/**\r\n * 深拷贝\r\n *\r\n * @param {*} obj\r\n * @return {*}\r\n */\r\nexport default function deepClone(obj) {\r\n  return {};\r\n}\r\n","test":"import assert from 'assert';\r\nimport _deepClone from './answer.mjs';\r\nimport deepClone from './index.mjs';\r\n\r\nconst cases = [\r\n  {\r\n    Input: [1, 2, { a: 1 }],\r\n    Expected: [1, 2, { a: 1 }],\r\n    Message: '两层对象',\r\n  },\r\n  {\r\n    Input: [{ f: 1 }],\r\n    Expected: [{ f: 1 }],\r\n    Message: '一层对象',\r\n  },\r\n  {\r\n    Input: { b: [{ c: 1, d: [{ d: 1, f: 2 }] }] },\r\n    Expected: { b: [{ c: 1, d: [{ d: 1, f: 2 }] }] },\r\n    Message: '两层对象, 修改返回值',\r\n  },\r\n];\r\n\r\n(function () {\r\n  for (let i = 0; i < cases.length; i++) {\r\n    const { Input, Expected, Message } = cases[i];\r\n    let output;\r\n    try {\r\n      output = deepClone(Input);\r\n      assert.deepEqual(output, Expected);\r\n    } catch (error) {\r\n      console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('Input:', JSON.stringify(Input));\r\n        console.log('Expected:', JSON.stringify(error.expected));\r\n        console.log('Received:', JSON.stringify(output));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    const originInput = _deepClone(Input);\r\n    try {\r\n      output['1'] = Math.random();\r\n      assert.deepEqual(Input, originInput);\r\n    } catch (error) {\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n        console.log(\r\n          'Mutate Output Expected Input: ',\r\n          JSON.stringify(originInput)\r\n        );\r\n        console.log('Input: ', JSON.stringify(Input));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    console.log('用例 ' + String(i + 1) + ': ' + Message + ' 通过');\r\n  }\r\n})();\r\n"},"unique":{"answer":"export default function unique(arr) {\r\n  return [...new Set(arr)];\r\n}\r\n","introduce":"## Unique\r\n\r\n数组去重\r\n\r\n用例 1:\r\n\r\n```js\r\nconst arr = [1, 2, 3];\r\nconst uniqueArr = unique(arr1);\r\n\r\nconsole.log(uniqueArr); // [1, 2, 3]\r\n```\r\n\r\n用例 2:\r\n\r\n```js\r\nconst arr = [1, 2, 3, 3, 3];\r\nconst uniqueArr = unique(arr);\r\n\r\nconsole.log(uniqueArr); // [1, 2, 3]\r\n```\r\n","index":"export default function unique(arr) {\r\n  return [];\r\n}\r\n","test":"import assert from 'assert';\r\nimport unique from './index.mjs';\r\n\r\nconst cases = [\r\n  {\r\n    Input: [1, 2, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '无重复数字',\r\n  },\r\n  {\r\n    Input: [1, 2, 3, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '单个重复数字',\r\n  },\r\n  {\r\n    Input: [1, 1, 2, 2, 2, 3, 3],\r\n    Expected: [1, 2, 3],\r\n    Message: '多个重复数字',\r\n  },\r\n];\r\n\r\n(function () {\r\n  for (let i = 0; i < cases.length; i++) {\r\n    const { Input, Expected, Message } = cases[i];\r\n    let output;\r\n    try {\r\n      output = unique(Input);\r\n      assert.deepEqual(output, Expected);\r\n    } catch (error) {\r\n      console.log('用例 ' + String(i + 1) + ': ' + Message + ' 未通过');\r\n      if (error.code === 'ERR_ASSERTION') {\r\n        console.log('Input:', JSON.stringify(Input));\r\n        console.log('Expected:', JSON.stringify(error.expected));\r\n        console.log('Received:', JSON.stringify(output));\r\n      } else {\r\n        console.log(error);\r\n      }\r\n      break;\r\n    }\r\n    console.log('用例 ' + String(i + 1) + ': ' + Message + ' 通过');\r\n  }\r\n})();\r\n"}}